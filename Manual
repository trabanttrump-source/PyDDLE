# PyDDLE - Python Development IDE v1.0 - Complete Help Documentation

## Overview

PyDDLE (Python Development IDE) is a comprehensive integrated development environment for Python programming. It combines advanced code editing features with debugging tools, code compilation capabilities, and AI-assisted development features.

## Installation and Setup

### Prerequisites
- Python 3.7 or higher
- PyQt5
- Additional packages (automatically checked and installed):

```bash
pip install PyQt5 pyqtgraph networkx matplotlib requests psutil PyQtWebEngine
```

### Optional Dependencies for Enhanced Features
```bash
# Code formatting
pip install autopep8 black

# Code analysis
pip install pyflakes

# Executable creation
pip install pyinstaller
```

## Main Features

### 1. Code Editor

#### Syntax Highlighting
The editor provides color-coded syntax highlighting for:
- Keywords (blue)
- Classes (green)
- Functions (orange)
- Strings (dark red)
- Comments (green)
- Numbers (purple)

**Example:**
```python
# This is a comment (green)
class MyClass:  # 'class' keyword (blue), 'MyClass' (green)
    def __init__(self):  # 'def' keyword (blue), '__init__' (orange)
        self.value = 42  # number (purple)
        self.text = "Hello"  # string (dark red)
```

#### Line Numbers and Navigation
- Automatic line numbering
- Click on structure tree items to navigate to specific functions/classes
- Current line highlighting

#### Auto-Completion and Smart Editing
- Automatic bracket completion
- Smart indentation after colons
- Enter key preserves current indentation level

### 2. Code Execution

#### Running Code
- **F5** or **‚ñ∂ Run**: Execute the current script
- Real-time output in the console panel
- Automatic syntax checking before execution

#### Testing Mode
- **F9** or **üß™ Test**: Run with execution preview
- Visual line-by-line execution highlighting
- Real-time variable inspection

**Example Test Session:**
```python
def calculate_sum(a, b):
    result = a + b
    print(f"Sum: {result}")
    return result

# Test the function
x = 10
y = 20
calculate_sum(x, y)
```

### 3. Debugging Features

#### Debugger Panel
Access via **F10** or **üêû Debug** button:

- **Step Into**: Execute next line, enter functions
- **Step Over**: Execute next line, skip function details
- **Step Out**: Complete current function
- **Continue**: Run until next breakpoint
- **Pause**: Temporarily halt execution
- **Stop**: Terminate debugging session

#### Breakpoints
- Click on line numbers to set breakpoints
- Execution pauses at breakpoints for inspection
- View all breakpoints in debugger panel

**Debugging Example:**
```python
def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)  # Set breakpoint here to inspect
print(f"Factorial: {result}")
```

### 4. Code Analysis and Improvement

#### Syntax Checking
- **F8**: Manual syntax check
- Real-time error detection
- Error suggestions and fixes

**Common Error Examples and Fixes:**

```python
# ERROR: Missing colon
if x > 5  # Syntax error - add colon
    print("Large")

# FIXED:
if x > 5:
    print("Large")

# ERROR: Indentation mismatch
def test():
print("Hello")  # Expected indentation

# FIXED:
def test():
    print("Hello")
```

#### Code Formatting
- **Ctrl+Shift+F**: Format entire code or selection
- Supports autopep8 and black formatters
- Basic formatting fallback

**Formatting Example:**
```python
# Before formatting
def messy_function(x,y):
if x>5:return x*y
else:return x/y

# After formatting
def messy_function(x, y):
    if x > 5:
        return x * y
    else:
        return x / y
```

### 5. AI Code Suggestions

Access via **Ctrl+I** or Tools ‚Üí AI Suggestions:

**Example Prompts:**
- "Create a function to read CSV files"
- "Write a class for managing user accounts"
- "Generate code for sorting algorithms"

**AI Response Example:**
```python
# AI generated code - CSV reader function
import csv

def read_csv_file(filename):
    """
    Read data from CSV file and return as list of dictionaries
    """
    data = []
    try:
        with open(filename, 'r', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                data.append(row)
    except FileNotFoundError:
        print(f"Error: File {filename} not found")
    except Exception as e:
        print(f"Error reading file: {e}")
    
    return data
```

### 6. Compilation to Executable

Access via Tools ‚Üí Compile to EXE or **‚öô Compile** button:

#### Supported Options:
- **One File vs Directory**: Single executable or folder distribution
- **Console vs Windowed**: Show console window or run as GUI application
- **Icon Customization**: Add custom application icons
- **Additional Files**: Include data files, images, etc.
- **Hidden Imports**: Specify modules PyInstaller might miss

**Compilation Configuration Example:**
```
Script: C:/projects/my_app.py
Output: C:/dist/
Mode: One File, Windowed
Icon: C:/projects/icon.ico
Additional Files: [images/, data.csv]
Hidden Imports: [pygame, requests]
```

### 7. Project Management

#### File Operations
- **Ctrl+N**: New file
- **Ctrl+O**: Open file
- **Ctrl+S**: Save file
- **Ctrl+Shift+S**: Save as

#### Code Structure Panel
- Tree view of classes, functions, and imports
- Double-click to navigate to definition
- Real-time updates as you code

**Structure Example:**
```
Code Structure
‚îú‚îÄ‚îÄ import os
‚îú‚îÄ‚îÄ import sys
‚îú‚îÄ‚îÄ class DataProcessor
‚îÇ   ‚îú‚îÄ‚îÄ def __init__
‚îÇ   ‚îî‚îÄ‚îÄ def process_data
‚îî‚îÄ‚îÄ def main
```

### 8. Advanced Editing Features

#### Find and Replace
- **Ctrl+F**: Basic find
- **Ctrl+H**: Replace
- **Ctrl+Shift+F**: Advanced find/replace with regex

#### Commenting
- **Ctrl+/**: Comment selection
- **Ctrl+Shift+/**: Uncomment selection
- **Comment Dialog**: Structured comments and docstrings

**Commenting Examples:**
```python
# Single line comment
print("Hello")  # Inline comment

"""
Multi-line block comment
Can span multiple lines
"""

def example_function():
    """
    This is a docstring
    Provides function documentation
    """
    pass
```

#### Code Navigation
- **Ctrl+Mouse Click**: Go to definition (when implemented)
- Structure tree double-click
- Find all references

### 9. Variable Inspector

Real-time variable monitoring during execution:

```
Variable    Value       Type
x           10          int
name        "John"      str
items       [1,2,3]     list
```

### 10. Import Management

Automatic detection and installation of missing packages:

**Example:**
```python
import requests  # If missing, offers to install
import pandas as pd  # Checks for pandas availability
from pygame import mixer  # Verifies pygame installation
```

## Practical Examples

### Example 1: Complete Application Development

```python
import tkinter as tk
from tkinter import messagebox
import json

class SimpleApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("My App")
        self.setup_ui()
        
    def setup_ui(self):
        # Create widgets
        self.label = tk.Label(self.root, text="Enter your name:")
        self.label.pack(pady=10)
        
        self.entry = tk.Entry(self.root, width=30)
        self.entry.pack(pady=5)
        
        self.button = tk.Button(self.root, text="Greet", command=self.greet)
        self.button.pack(pady=10)
        
    def greet(self):
        name = self.entry.get()
        if name:
            messagebox.showinfo("Greeting", f"Hello, {name}!")
        else:
            messagebox.showwarning("Input Error", "Please enter your name")
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = SimpleApp()
    app.run()
```

**Development Workflow:**
1. Write code in PyDDLE
2. Test with **F9** (see GUI creation)
3. Debug with **F10** (step through initialization)
4. Format with **Ctrl+Shift+F**
5. Compile to EXE for distribution

### Example 2: Data Processing Script

```python
import pandas as pd
import matplotlib.pyplot as plt

def load_and_analyze_data(filename):
    """
    Load CSV data and perform basic analysis
    """
    try:
        # Load data
        df = pd.read_csv(filename)
        
        # Basic analysis
        print("Data Overview:")
        print(f"Shape: {df.shape}")
        print(f"Columns: {list(df.columns)}")
        print("\nBasic Statistics:")
        print(df.describe())
        
        # Create visualization
        if 'value' in df.columns:
            plt.figure(figsize=(10, 6))
            df['value'].plot(kind='hist', bins=20)
            plt.title("Value Distribution")
            plt.savefig('distribution.png')
            plt.close()
            
        return df
        
    except Exception as e:
        print(f"Error processing data: {e}")
        return None

# Example usage
if __name__ == "__main__":
    data = load_and_analyze_data("sample_data.csv")
    if data is not None:
        print("Analysis completed successfully!")
```

### Example 3: Web API Client

```python
import requests
import json
from datetime import datetime

class WeatherAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "http://api.openweathermap.org/data/2.5"
        
    def get_weather(self, city):
        """
        Get current weather for a city
        """
        url = f"{self.base_url}/weather"
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            return {
                'city': data['name'],
                'temperature': data['main']['temp'],
                'description': data['weather'][0]['description'],
                'humidity': data['main']['humidity']
            }
            
        except requests.exceptions.RequestException as e:
            print(f"API Error: {e}")
            return None

# Usage example
def main():
    api = WeatherAPI("your_api_key_here")
    weather = api.get_weather("London")
    
    if weather:
        print(f"Weather in {weather['city']}:")
        print(f"Temperature: {weather['temperature']}¬∞C")
        print(f"Conditions: {weather['description']}")
        print(f"Humidity: {weather['humidity']}%")

if __name__ == "__main__":
    main()
```

## Keyboard Shortcuts Reference

### File Operations
- `Ctrl+N` - New file
- `Ctrl+O` - Open file
- `Ctrl+S` - Save file
- `Ctrl+Shift+S` - Save as
- `Ctrl+Q` - Exit

### Editing
- `Ctrl+Z` - Undo
- `Ctrl+Y` - Redo
- `Ctrl+X` - Cut
- `Ctrl+C` - Copy
- `Ctrl+V` - Paste
- `Ctrl+A` - Select all
- `Ctrl+/` - Comment selection
- `Ctrl+Shift+/` - Uncomment selection
- `Ctrl+Shift+F` - Format code

### Navigation
- `Ctrl+F` - Find
- `Ctrl+H` - Replace
- `Ctrl+Shift+F` - Advanced find/replace
- `Ctrl+F6` - Next window
- `Ctrl+Shift+F6` - Previous window

### Execution
- `F5` - Run code
- `F9` - Test application
- `F10` - Debug
- `F7` - Stop execution
- `F8` - Check syntax

### View
- `Ctrl++` - Zoom in
- `Ctrl+-` - Zoom out
- `Ctrl+0` - Reset zoom

### AI Features
- `Ctrl+I` - AI suggestions

## Troubleshooting Common Issues

### 1. Module Import Errors
**Problem**: "ModuleNotFoundError" when running code
**Solution**: Use the automatic import checker or manually install:
```python
# PyDDLE will detect and offer to install missing modules
import missing_module  # Triggers installation prompt
```

### 2. Syntax Errors
**Problem**: Red highlighted lines with syntax errors
**Solution**: Check the error message in output console and use suggested fixes

### 3. PyInstaller Compilation Failures
**Problem**: EXE compilation fails
**Solutions**:
- Check all imports are available
- Verify additional files exist
- Try with `--debug` flag enabled
- Check hidden imports list

### 4. Debugger Not Working
**Problem**: Debugger buttons don't respond
**Solution**:
- Ensure code has no syntax errors
- Use Python 3.7+ for full debugger support
- Check if breakpoints are set

### 5. Performance Issues
**Solutions**:
- Close unused file tabs
- Disable real-time syntax checking for large files
- Increase system memory allocation

## Best Practices

### 1. Code Organization
```python
# Group imports
import os
import sys
import json
from datetime import datetime

# Constants
CONFIG_FILE = "config.json"
MAX_RETRIES = 3

# Classes
class DataProcessor:
    def __init__(self):
        self.data = []
    
    def process(self):
        pass

# Functions
def helper_function():
    pass

# Main execution
if __name__ == "__main__":
    processor = DataProcessor()
    processor.process()
```

### 2. Effective Debugging
- Set breakpoints at function entries
- Use variable inspector during test mode
- Step through complex algorithms line by line

### 3. Efficient Compilation
- Exclude unused modules to reduce EXE size
- Use `--onefile` for distribution
- Include all required data files
- Test compiled EXE on target system

## Advanced Features

### Custom Code Templates
Create and use code snippets for common patterns:

```python
# Template: Flask web app
from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/submit', methods=['POST'])
def submit():
    data = request.form['data']
    return f"Received: {data}"

if __name__ == '__main__':
    app.run(debug=True)
```

### Integration with External Tools
PyDDLE can be extended to work with:
- Version control systems (Git)
- Database management tools
- API testing utilities
- Documentation generators

## Support and Resources

- **Error Reporting**: Use the syntax checker and debugger
- **Community**: Share compilation configurations
- **Updates**: Check for new versions with enhanced features

This comprehensive IDE provides everything needed for Python development, from simple scripts to complex applications with GUI components and executable distribution.
